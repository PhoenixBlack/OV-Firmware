////////////////////////////////////////////////////////////////////////////////
// MAJOR MODE 2 (ON-ORBIT)
////////////////////////////////////////////////////////////////////////////////
FUNCTION MAJOR_MODE2_TRANSFER {
	IF RESTART {
		SET MM2_DOCK_DP TO 0.
		SET MM2_DOCK_DY TO 0.
		SET MM2_DOCK_DR TO 0.		
		SET MM2_DOCK_PORT TO 0.
		SET MM2_RCS_SENSITIVITY TO 10.
		SET MM2_USER_INPUT_MAG TO 2.
		
		SET MM2_TARGET_ALT TO 130000.
	}
	
	UNLOCK THROTTLE.
	UNLOCK STEERING.
	SET SHIP:CONTROL:NEUTRALIZE TO TRUE.
	SET SHIP:CONTROL:FORE		TO 0.
	SET SHIP:CONTROL:STARBOARD	TO 0.
	SET SHIP:CONTROL:TOP		TO 0.
}

FUNCTION MAJOR_MODE2_COMMAND {
	PARAMETER CMD.
	PARAMETER VALUE.
	
	IF CMD = 1 { // VERB 1: SET DOCKING PORT
		SET MM2_DOCK_PORT TO VALUE.
	}
	IF CMD = 2 { // VERB 2: SET RCS SENSITIVITY
		SET MM2_RCS_SENSITIVITY TO VALUE.
	}
	IF CMD = 3 { // VERB 3: SET USER INPUT MAGNITUDE
		SET MM2_USER_INPUT_MAG TO VALUE.
	}
	IF CMD = 4 { // VERB 4: SET DELTA X
		SET MM2_DOCK_DP TO VALUE.
	}
	IF CMD = 5 { // VERB 5: SET DELTA Y
		SET MM2_DOCK_DY TO VALUE.
	}
	IF CMD = 6 { // VERB 6: SET DELTA Z
		SET MM2_DOCK_DR TO VALUE.
	}
	//IF CMD = 7 { // VERB 7: SET TARGET ALTITUDE
	//	SET MM2_TARGET_ALT TO VALUE.
	//}
}

FUNCTION MAJOR_MODE2 {
	IF MINOR_MODE = 0 { // MONITOR
		UNLOCK STEERING.
	}
	IF MINOR_MODE = 1 {	// LOW-POWER MODE
		UNLOCK STEERING.
		WAIT 1.0.
		RETURN.
	}
	IF (MINOR_MODE = 2) OR (MINOR_MODE = 3) OR 
	   (MINOR_MODE = 4) OR (MINOR_MODE = 5) { // STATION-KEEPING/DOCKING

		IF HASTARGET {
			// FIND DOCKING PORT, IF SELECTED
			SET PORTS TO TARGET:PARTSTAGGED("DOCK" + MM2_DOCK_PORT).		
		
			// RELATIVE POSITION/VELOCITY
			IF (MM2_DOCK_PORT = 0) OR (PORTS:LENGTH = 0) {
				SET REL_POSITION		TO TARGET:POSITION - SHIP:POSITION.
				SET REL_POSITION_SHIP	TO (-SHIP:FACING) * REL_POSITION.
				SET REL_VELOCITY		TO TARGET:VELOCITY:ORBIT - SHIP:VELOCITY:ORBIT.
				SET REL_VELOCITY_SHIP	TO (-SHIP:FACING) * REL_VELOCITY.
				SET TGT_ATTITUDE		TO TARGET:FACING.
			} ELSE {
				SET REL_POSITION		TO PORTS[0]:POSITION - SHIP:POSITION.
				SET REL_POSITION_SHIP	TO (-SHIP:FACING) * REL_POSITION.
				SET REL_VELOCITY		TO PORTS[0]:SHIP:VELOCITY:ORBIT - SHIP:VELOCITY:ORBIT.
				SET REL_VELOCITY_SHIP	TO (-SHIP:FACING) * REL_VELOCITY.
				SET TGT_ATTITUDE		TO -PORTS[0]:FACING.
			}
			
			// ATTITUDE LOCK
			IF (MINOR_MODE = 2) OR (MINOR_MODE = 5) {
				UNLOCK STEERING.
				SET SHIP:CONTROL:NEUTRALIZE TO TRUE.
			}
			IF (MINOR_MODE = 3) OR (MINOR_MODE = 4) {
				SET TARGET_DIR TO TGT_ATTITUDE.
				LOCK STEERING TO ((TGT_ATTITUDE*R(0,0,-MM2_DOCK_DR))*R(-MM2_DOCK_DP,0,0))*R(0,-MM2_DOCK_DY,0).
			}
			
			// POSITION LOCK
			IF (MINOR_MODE = 2) OR (MINOR_MODE = 3) {
				SET SHIP:CONTROL:NEUTRALIZE TO TRUE.
			}
			IF (MINOR_MODE = 4) OR (MINOR_MODE = 5) {
				SET SHIP:CONTROL:FORE		TO 1 * (MM2_RCS_SENSITIVITY * REL_VELOCITY_SHIP:Z + MM2_USER_INPUT_MAG*SHIP:CONTROL:PILOTFORE).
				SET SHIP:CONTROL:STARBOARD	TO 2 * (MM2_RCS_SENSITIVITY * REL_VELOCITY_SHIP:X + MM2_USER_INPUT_MAG*SHIP:CONTROL:PILOTSTARBOARD).
				SET SHIP:CONTROL:TOP		TO 3 * (MM2_RCS_SENSITIVITY * REL_VELOCITY_SHIP:Y + MM2_USER_INPUT_MAG*SHIP:CONTROL:PILOTTOP).
			}
		} ELSE {
			SET REL_POSITION		TO V(0,0,0).
			SET REL_POSITION_SHIP	TO V(0,0,0).
			SET REL_VELOCITY		TO V(0,0,0).
			SET REL_VELOCITY_SHIP	TO V(0,0,0).
				
			UNLOCK STEERING.
			SET SHIP:CONTROL:NEUTRALIZE TO TRUE.
		}
	}
	IF MINOR_MODE = 6 {	// TARGET TRACKING
		IF HASTARGET {
			SET REL_POSITION 		TO TARGET:POSITION - SHIP:POSITION.
			SET REL_POSITION_SHIP	TO (-SHIP:FACING) * REL_POSITION.
			LOCK STEERING TO ((ANGLEAXIS(0, REL_POSITION)*R(0,0,-MM2_DOCK_DR))*R(-MM2_DOCK_DP,0,0))*R(0,-MM2_DOCK_DY,0).
		} ELSE {
			SET REL_POSITION 		TO V(0,0,0).
			SET REL_POSITION_SHIP	TO V(0,0,0).
			UNLOCK STEERING.
			SET SHIP:CONTROL:NEUTRALIZE TO TRUE.
		}
	}
	IF MINOR_MODE = 7 {	// ORBITAL MANEUVERING
		// ..
	}

	// DISPLAY OUTPUT
	IF UI_UPDATE {
		PRINT_VAR(0, " H",	"M",	6, ROUND(ALTITUDE/10,0)*10,			0,0).
		PRINT_VAR(1, "AP",	"M",	6, ROUND(SHIP:APOAPSIS/10,0)*10,	13,0).
		PRINT_VAR(2, "PE",	"M",	6, ROUND(SHIP:PERIAPSIS/10,0)*10,	13,1).
		PRINT_VAR(3, "RF",	"U",	6, ROUND(RCSF+RCSL+RCSR,2),			0,1).
		
		IF (MINOR_MODE = 2) OR (MINOR_MODE = 3) OR (MINOR_MODE = 4) OR (MINOR_MODE = 5) {
			PRINT_VAR(4, "+VX",	"M/S",	7, ROUND(REL_VELOCITY_SHIP:X,4),	0,3).
			PRINT_VAR(5, "+VY",	"M/S",	7, ROUND(REL_VELOCITY_SHIP:Y,4),	0,4).
			PRINT_VAR(6, "+VZ",	"M/S",	7, ROUND(REL_VELOCITY_SHIP:Z,4),	0,5).
			
			PRINT_VAR(7, " +X",	"M",	7, ROUND(REL_POSITION_SHIP:X,2),	0,6).
			PRINT_VAR(8, " +Y",	"M",	7, ROUND(REL_POSITION_SHIP:Y,2),	0,7).
			PRINT_VAR(9, " +Z",	"M",	7, ROUND(REL_POSITION_SHIP:Z,2),	0,8).
			
			PRINT_VAR(10, "dP",	"*",	4, ROUND(MM2_DOCK_DP,0),			14,6).
			PRINT_VAR(11,"dY",	"*",	4, ROUND(MM2_DOCK_DY,0),			14,7).
			PRINT_VAR(12,"dR",	"*",	4, ROUND(MM2_DOCK_DR,0),			14,8).
			PRINT_VAR(13,"PORT","",		1, MM2_DOCK_PORT,					14,9).
		}
		IF MINOR_MODE = 6 {
			PRINT_VAR(4, " +X",	"M",	7, ROUND(REL_POSITION_SHIP:X,0),	0,3).
			PRINT_VAR(5, " +Y",	"M",	7, ROUND(REL_POSITION_SHIP:Y,0),	0,4).
			PRINT_VAR(6, " +Z",	"M",	7, ROUND(REL_POSITION_SHIP:Z,0),	0,5).
			
			PRINT_VAR(7, "dP",	"*",	4, ROUND(MM2_DOCK_DP,0),			14,3).
			PRINT_VAR(8, "dY",	"*",	4, ROUND(MM2_DOCK_DY,0),			14,4).
			PRINT_VAR(9, "dR",	"*",	4, ROUND(MM2_DOCK_DR,0),			14,5).
		}
	}
}