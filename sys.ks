////////////////////////////////////////////////////////////////////////////////
// SYSTEM AND UTILITY STUFF
////////////////////////////////////////////////////////////////////////////////
// CURRENT SCREEN ID
SET SCREEN TO 0.
// WAS HEADER CHANGED
SET UI_HEADER_CHANGED TO FALSE.
// UI UPDATE RATE
SET UI_RATE TO 0.25.
// UI UPDATE TIME
SET UI_TIME TO TIME:SECONDS.
// SHOULD UI BE REPAINTED ENTIRELY
SET UI_REFRESH TO FALSE.
// SHOULD MAJOR MODE UPDATE UI
SET UI_UPDATE TO FALSE.
// LAST TIME HEADER WAS UPDATED
SET UI_HEADER_TIME TO -10000.

SET UI_VARIABLES TO LIST(
	-100000,-100000,-100000,-100000,
	-100000,-100000,-100000,-100000,
	-100000,-100000,-100000,-100000,
	-100000,-100000,-100000,-100000).
	
FUNCTION UI_RESET_VARIABLES {
	SET UI_VARIABLES[0]  TO -100000.
	SET UI_VARIABLES[1]  TO -100000.
	SET UI_VARIABLES[2]  TO -100000.
	SET UI_VARIABLES[3]  TO -100000.
	SET UI_VARIABLES[4]  TO -100000.
	SET UI_VARIABLES[5]  TO -100000.
	SET UI_VARIABLES[6]  TO -100000.
	SET UI_VARIABLES[7]  TO -100000.
	SET UI_VARIABLES[8]  TO -100000.
	SET UI_VARIABLES[9]  TO -100000.
	SET UI_VARIABLES[10] TO -100000.
	SET UI_VARIABLES[11] TO -100000.
	SET UI_VARIABLES[12] TO -100000.
	SET UI_VARIABLES[13] TO -100000.
	SET UI_VARIABLES[14] TO -100000.
	SET UI_VARIABLES[15] TO -100000.
}

// PRINT A VARIABLE
FUNCTION PRINT_VAR {
	PARAMETER ID.
	PARAMETER NAME.
	PARAMETER UNITS.
	PARAMETER PAD.
	PARAMETER V.
	PARAMETER X.
	PARAMETER Y.

	LOCAL X0 IS X.
	LOCAL X1 IS X + NAME:LENGTH + 1.
	LOCAL X2 IS X + NAME:LENGTH + 2 + PAD.
	LOCAL Y0 IS Y+2.
	
	IF UI_VARIABLES[ID] = -100000 {
		PRINT NAME AT (X0,Y0).
		PRINT UNITS AT (X2,Y0).
	}
	IF NOT (UI_VARIABLES[ID] = V) {
		PRINT "":PADLEFT(PAD) AT (X1,Y0).
		PRINT (V+""):PADLEFT(PAD) AT (X1,Y0).
	}
}

// PRINT A TIME MARKER
FUNCTION PRINT_TIME {
	PARAMETER T.
	PARAMETER X.
	PARAMETER Y.

	SET SECOND TO MOD(FLOOR(T),60).
	SET MINUTE TO MOD(FLOOR(T / 60),60).
	SET HOUR   TO MOD(FLOOR(T / 3600),60).
	
	IF HOUR < 10 {
		PRINT "0" AT (X+0,Y).
		PRINT HOUR AT (X+1,Y).
	} ELSE {
		PRINT HOUR AT (X+0,Y).
	}
	IF MINUTE < 10 {
		PRINT "0" AT (X+3,Y).
		PRINT MINUTE AT (X+4,Y).
	} ELSE {
		PRINT MINUTE AT (X+3,Y).
	}
	IF ROUND(SECOND,0) < 10 {
		PRINT "0" AT (X+6,Y).
		PRINT ROUND(SECOND,0) AT (X+7,Y).
	} ELSE {
		PRINT ROUND(SECOND,0) AT (X+6,Y).
	}
	PRINT ":" AT (X+2,Y).
	PRINT ":" AT (X+5,Y).
}

// DRAW MODE HEADER
FUNCTION UI_HEADER {
	IF UI_HEADER_CHANGED {
		PRINT "OP" AT (0,0).
		PRINT "            " AT (4,0).
		
		// PRINT MODE NUMBER
		PRINT MAJOR_MODE AT (2,0).
		PRINT MINOR_MODE AT (3,0).
		
		// PRINT MODE NAME
		IF MAJOR_MODE = 0 { // GROUND IDLE
				   IF MINOR_MODE = 0 { PRINT "STARTUP   " AT (5,0).
			}
		} ELSE IF MAJOR_MODE = 1 { // STARTUP
				   IF MINOR_MODE = 0 { PRINT "PRE-LAUNCH" AT (5,0).
			} ELSE IF MINOR_MODE = 1 { PRINT "ENG CHECK " AT (5,0).
			} ELSE IF MINOR_MODE = 2 { PRINT "TWR CLEAR " AT (5,0).
			} ELSE IF MINOR_MODE = 3 { PRINT "HDG ROTATE" AT (5,0).
			} ELSE IF MINOR_MODE = 4 { PRINT "OPEN LOOP " AT (5,0).
			} ELSE IF MINOR_MODE = 5 { PRINT "CLOSED ST1" AT (5,0).
			} ELSE IF MINOR_MODE = 6 { PRINT "!SEP!SEP! " AT (5,0).
			} ELSE IF MINOR_MODE = 7 { PRINT "CLOSED ST2" AT (5,0).
			} ELSE IF MINOR_MODE = 8 { PRINT "COAST ET  " AT (5,0).
			} ELSE IF MINOR_MODE = 9 { PRINT "SEP ET    " AT (5,0).
			}
		} ELSE IF MAJOR_MODE = 2 { // ON-ORBIT
				   IF MINOR_MODE = 0 { PRINT "MONITOR   " AT (5,0).
			} ELSE IF MINOR_MODE = 1 { PRINT "LOW POWER " AT (5,0).
			} ELSE IF MINOR_MODE = 2 { PRINT "SEP COAST " AT (5,0).
			}
		} ELSE IF MAJOR_MODE = 3 { // LANDING
				   IF MINOR_MODE = 0 { PRINT "MONITOR   " AT (5,0).
			} ELSE IF MINOR_MODE = 1 { PRINT "APPROACH  " AT (5,0).
			} ELSE IF MINOR_MODE = 2 { PRINT "DESCENT   " AT (5,0).
			} ELSE IF MINOR_MODE = 3 { PRINT "TOUCHDOWN " AT (5,0).
			} ELSE IF MINOR_MODE = 4 { PRINT "BRAKE FULL" AT (5,0).
			} ELSE IF MINOR_MODE = 5 { PRINT "STANDBY   " AT (5,0).
			}
		} ELSE IF MAJOR_MODE = 5 { // ABORT
				   IF MINOR_MODE = 0 { PRINT "ABORT RLTS" AT (5,0).
			} ELSE IF MINOR_MODE = 1 { PRINT "ABORT ATO " AT (5,0).
			} ELSE IF MINOR_MODE = 2 { PRINT "ABORT DTCH" AT (5,0).
			}
		} ELSE IF MAJOR_MODE = 6 { // RE-ENTRY
				   IF MINOR_MODE = 0 { PRINT "MONITOR   " AT (5,0).
			} ELSE IF MINOR_MODE = 1 { PRINT "BURN ARMED" AT (5,0).
			} ELSE IF MINOR_MODE = 2 { PRINT "ENTRY BURN" AT (5,0).
			} ELSE IF MINOR_MODE = 3 { PRINT "RE-ENTRY 1" AT (5,0).
			} ELSE IF MINOR_MODE = 4 { PRINT "RE-ENTRY 2" AT (5,0).
			} ELSE IF MINOR_MODE = 5 { PRINT "RE-ENTRY 3" AT (5,0).
			} ELSE IF MINOR_MODE = 6 { PRINT "RE-ENTRY 4" AT (5,0).
			}
		}
	}

	// PRINT CURRENT STATE
	PRINT_TIME(MISSIONTIME,16,0).
}.

// UI TASK
FUNCTION UI_TASK {		
	IF TIME:SECONDS - UI_TIME > UI_RATE {
		// UPDATE UI
		SET UI_TIME TO TIME:SECONDS.
		SET UI_UPDATE TO TRUE.
		
		// FULL REFRESH IS REQUESTED
		IF UI_REFRESH {
			CLEARSCREEN.
			UI_RESET_VARIABLES().
			SET UI_REFRESH TO FALSE.
			SET UI_HEADER_CHANGED TO TRUE.
		}
		
		// UPDATE HEADER EVERY SECOND
		IF TIME:SECONDS - UI_HEADER_TIME > 1.0 {
			SET UI_HEADER_TIME TO TIME:SECONDS.
			UI_HEADER().
		}
		
		// RUN UI SCREEN TASKS
		UI_EVENTSCREEN().
		UI_SYSTEMSCREEN().
		
		// DRAW COMMAND ENTRY
		IF ENTERING_COMMAND {
			PRINT "VERB" AT (2,1).
			IF COMMAND = -1 {
				PRINT " " AT (6,1).
			} ELSE {
				PRINT COMMAND AT (6,1).
				PRINT COMMAND_PARAMETER AT (8,1).
			}
		}
	} ELSE {
		// NO UPDATE REQUIRED
		SET UI_UPDATE TO FALSE.
	}
}

// TRANSFER MODE
FUNCTION TRANSFER_MODE {
	PARAMETER MAJOR.
	PARAMETER MINOR.
	
	// TRANSFER TO MINOR MODE
	SET MINOR_MODE TO MINOR.
	SET MODE_TIMER TO TIME:SECONDS.

	// RUN MAJOR MODE INITIALIZATION
	IF MAJOR_MODE <> MAJOR { // CHANGE MAJOR MODE
		SET MAJOR_MODE TO MAJOR.
			 IF MAJOR_MODE = 0 { MAJOR_MODE0_TRANSFER(). }
		ELSE IF MAJOR_MODE = 1 { MAJOR_MODE1_TRANSFER(). }
		ELSE IF MAJOR_MODE = 2 { MAJOR_MODE2_TRANSFER(). }
		ELSE IF MAJOR_MODE = 3 { MAJOR_MODE3_TRANSFER(). }
		ELSE IF MAJOR_MODE = 5 { MAJOR_MODE5_TRANSFER(). }
		ELSE IF MAJOR_MODE = 6 { MAJOR_MODE6_TRANSFER(). }		
	}
	
	// UPDATE UI
	SET UI_REFRESH TO TRUE.
	SET UI_HEADER_CHANGED TO TRUE.
	SET UI_HEADER_TIME TO -10000.
	SET SCREEN TO 0.

	// STORE MODE
	STORE_MAJOR_MODE:CLEAR().
	STORE_MAJOR_MODE:WRITELN("M" + MAJOR_MODE).
	
	STORE_MINOR_MODE:CLEAR().
	STORE_MINOR_MODE:WRITELN("M" + MINOR_MODE).
}

// HANDLE COMMAND
FUNCTION HANDLE_COMMAND {
	IF COMMAND = 0 {
		LOCAL MIN IS MOD(FLOOR(COMMAND_PARAMETER),10).
		LOCAL MAJ IS MOD(FLOOR(COMMAND_PARAMETER/10),10).
		TRANSFER_MODE(MAJ,MIN).
	}
	IF COMMAND = 9 {
		IF (MAJOR_MODE = 1) AND (MINOR_MODE = 0) {
			TRANSFER_MODE(1,1).
			STAGE.
		}
		IF (MAJOR_MODE = 3) AND (MINOR_MODE = 0) {
			TRANSFER_MODE(3,1).
		}
		IF (MAJOR_MODE = 6) AND (MINOR_MODE = 0) {
			TRANSFER_MODE(6,1).
		}
	}
}



////////////////////////////////////////////////////////////////////////////////
// SYSTEMS SCREEN
////////////////////////////////////////////////////////////////////////////////
FUNCTION GET_RESOURCE {
	PARAMETER PART_NAME.
	PARAMETER RES_NAME.
	
	LOCAL RES IS 0.
	FOR PART IN SHIP:PARTSTAGGED(PART_NAME) {
		FOR RESOURCE IN PART:RESOURCES {
			IF RESOURCE:NAME = RES_NAME {
				SET RES TO RES + RESOURCE:AMOUNT. //*1000*RESOURCE:DENSITY.
			}
		}
	}
	RETURN RES.
}

SET FLAG_LOW_RCS TO FALSE.
SET FLAG_LOW_OMS TO FALSE.
SET FLAG_LOW_ECHG TO FALSE.
SET FLAG_CPU_TIME TO FALSE.
SET MONITORING_TIME TO TIME:SECONDS.
SET MONITORING_CYCLE TO 0.
SET RCSF TO 0.
SET RCSL TO 0.
SET RCSR TO 0.
SET OMSF TO 0.
SET OMSO TO 0.

FUNCTION MONITORING_TASK {
	IF TIME:SECONDS - MONITORING_TIME > 1.0 {
		SET MONITORING_TIME TO TIME:SECONDS.
	
		// GET ALL RESOURCES
		SET ECHARGE TO 0.
		//FOR PART IN SHIP:PARTS {
		//	FOR RESOURCE IN PART:RESOURCES {
		//		IF RESOURCE:NAME = "ELECTRICCHARGE" {
		//			SET ECHARGE TO ECHARGE + RESOURCE:AMOUNT.
		//		}
		//	}
		//}
		IF MONITORING_CYCLE = 0 {
			SET RCSF TO GET_RESOURCE("CM",	"MONOPROPELLANT").
		} ELSE IF MONITORING_CYCLE = 1 {
			SET RCSL TO GET_RESOURCE("RCSL","MONOPROPELLANT").
		} ELSE IF MONITORING_CYCLE = 2 {
			SET RCSR TO GET_RESOURCE("RCSR","MONOPROPELLANT").
		} ELSE IF MONITORING_CYCLE = 3 {
			SET OMSF TO GET_RESOURCE("AFT",	"LIQUIDFUEL").
		} ELSE IF MONITORING_CYCLE = 4 {
			SET OMSO TO GET_RESOURCE("AFT",	"OXIDIZER").
		}
		SET MONITORING_CYCLE TO MONITORING_CYCLE + 1.
		IF MONITORING_CYCLE > 4 {
			SET MONITORING_CYCLE TO 0.
		}
		
		// WARN ABOUT LOW THRESHOLDS
		IF MONITORING_CYCLE = 0 {
			IF RCSF+RCSL+RCSR < 150 {
				IF NOT FLAG_LOW_RCS {
					PUSH_EVENT(EVENT_LOW_RCS).
					SET FLAG_LOW_RCS TO TRUE.
				} 
			} ELSE {
				SET FLAG_LOW_RCS TO FALSE.
			}
			IF OMSF < 200 {
				IF NOT FLAG_LOW_OMS {
					PUSH_EVENT(EVENT_LOW_OMS).
					SET FLAG_LOW_OMS TO TRUE.
				}
			} ELSE {
				SET FLAG_LOW_OMS TO FALSE.
			}
			IF ECHARGE < 400 {
				IF NOT FLAG_LOW_ECHG {
					PUSH_EVENT(EVENT_LOW_CHARGE).
					SET FLAG_LOW_ECHG TO TRUE.
				}
			} ELSE {
				SET FLAG_LOW_ECHG TO FALSE.
			}
		}
	}
	
	// Constant monitoring
	//IF DT > 0.100 {
	//	IF NOT FLAG_CPU_TIME {
	//		PUSH_EVENT(EVENT_CPU_OVERTIME).
	//		SET FLAG_CPU_TIME TO TRUE.
	//	}
	//} ELSE {
	//	SET FLAG_CPU_TIME TO FALSE.
	//}
}

FUNCTION UI_SYSTEMSCREEN {
	IF SCREEN = 2 {
		PRINT_VAR(0, " ECH",	"U",	6, ROUND(ECHARGE,1),	0,0).
		PRINT_VAR(1, "RCSF",	"KG",	6, ROUND(RCSF,1),		0,1).
		PRINT_VAR(2, "RCSL",	"KG",	6, ROUND(RCSL,1), 		0,2).
		PRINT_VAR(3, "RCSR",	"KG",	6, ROUND(RCSR,1), 		0,3).
		PRINT_VAR(4, "OMSF",	"KG",	6, ROUND(OMSF,1),		0,4).
		PRINT_VAR(5, "OMSO",	"KG",	6, ROUND(OMSO,1), 		0,5).
		PRINT_VAR(6, "TIME",	"SEC",	6, ROUND(DT*1000,1),	0,6).

		SET UI_UPDATE TO FALSE.
	}
}.




////////////////////////////////////////////////////////////////////////////////
// KEY HANDLING
////////////////////////////////////////////////////////////////////////////////
SET ENTERING_COMMAND TO FALSE.
SET COMMAND TO -1.
SET COMMAND_PARAMETER TO 0.

FUNCTION ENTER_DIGIT {
	PARAMETER DIGIT.
	IF ENTERING_COMMAND {
		SET UI_TIME TO 0.
		IF COMMAND = -1 {
			SET COMMAND TO DIGIT.
		} ELSE {
			SET COMMAND_PARAMETER TO COMMAND_PARAMETER*10 + DIGIT.
		}
	}
}

//33 - VERB
//32 - GPC
//31 - ACK
//30 - PRO
//20 - KEYS

ON AG1 { // SCREEN0 - MAIN
	SET SCREEN TO 0.
	SET UI_REFRESH TO TRUE.
	SET UI_HEADER_CHANGED TO TRUE.
	UI_RESET_VARIABLES().
	PRESERVE.
}
ON AG2 { // SCREEN1 - EVENTS
	SET SCREEN TO 1.
	SET UI_REFRESH TO TRUE.
	SET UI_HEADER_CHANGED TO TRUE.
	UI_RESET_VARIABLES().
	PRESERVE.
}
ON AG3 { // SCREEN2 - STATUS1
	SET SCREEN TO 2.
	SET UI_REFRESH TO TRUE.
	SET UI_HEADER_CHANGED TO TRUE.
	UI_RESET_VARIABLES().
	PRESERVE.
}
ON AG4 { // SCREEN2 - STATUS2
	SET SCREEN TO 3.
	SET UI_REFRESH TO TRUE.
	SET UI_HEADER_CHANGED TO TRUE.
	UI_RESET_VARIABLES().
	PRESERVE.
}
ON AG31 { // ACK
	SET EVENT_ACK TO TRUE.
	SET UI_REFRESH TO TRUE.
	SET UI_HEADER_CHANGED TO TRUE.
	PRESERVE.
}
ON AG33 { // VERB
	IF ENTERING_COMMAND {
		SET ENTERING_COMMAND TO FALSE.
		SET UI_REFRESH TO TRUE.
		SET UI_HEADER_CHANGED TO TRUE.
	} ELSE {
		SET ENTERING_COMMAND TO TRUE.
		SET UI_REFRESH TO TRUE.
		SET UI_HEADER_CHANGED TO TRUE.
		SET COMMAND TO -1.
		SET COMMAND_PARAMETER TO 0.
	}
	PRESERVE.
}
ON AG30 { // PRO
	IF ENTERING_COMMAND {
		SET ENTERING_COMMAND TO FALSE.
		SET UI_REFRESH TO TRUE.
		SET UI_HEADER_CHANGED TO TRUE.
		HANDLE_COMMAND().
	}
	PRESERVE.
}
ON AG20 { ENTER_DIGIT(0). PRESERVE. }
ON AG21 { ENTER_DIGIT(1). PRESERVE. }
ON AG22 { ENTER_DIGIT(2). PRESERVE. }
ON AG23 { ENTER_DIGIT(3). PRESERVE. }
ON AG24 { ENTER_DIGIT(4). PRESERVE. }
ON AG25 { ENTER_DIGIT(5). PRESERVE. }
ON AG26 { ENTER_DIGIT(6). PRESERVE. }
ON AG27 { ENTER_DIGIT(7). PRESERVE. }
ON AG28 { ENTER_DIGIT(8). PRESERVE. }
ON AG29 { ENTER_DIGIT(9). PRESERVE. }