// INITIALIZE TERMINAL
CLEARSCREEN.
SET TERMINAL:CHARWIDTH TO 12.
SET TERMINAL:CHARHEIGHT TO 12.
SET TERMINAL:WIDTH TO 24.
SET TERMINAL:HEIGHT TO 12.
SET MAJOR_MODE TO 0.
SET MINOR_MODE TO 0.

// OPEN THE FILE
SET ID to 1.
UNTIL NOT EXISTS("DATA" + ID + ".CSV") {      // Prints the numbers 1-10
    SET ID to ID + 1.
}
SET DATAFILE TO CREATE("DATA" + ID + ".CSV").

// DEFINE FILE HEADER
DATAFILE:WRITE("TIME,").
FOR PART IN SHIP:PARTS {
	IF (PART:NAME = "sensorThermometer") OR (PART:NAME = "sensorAccelerometer") {
		SET MODULE TO PART:GETMODULE("ModuleEnviroSensor").
		SET TEMP TO MODULE:GETFIELD("DISPLAY").
		IF TEMP = "OFF" {
			MODULE:DOACTION("toggle display", TRUE).
		}
		PRINT "FOUND " + PART:TAG + " (" + TEMP + ")".
		DATAFILE:WRITE(PART:TAG+",").
	}
}
DATAFILE:WRITELN("0").

// START LOGGING
WAIT 1.0.
CLEARSCREEN.
PRINT "MODULAR DATA SYSTEM" AT (0,0).

// TOGGLE MADS
SET ACTIVE TO FALSE.
ON AG6 {
	TOGGLE ACTIVE.
	PRESERVE.
}

// KEEP WRITING TELEMETRY DATA
SET NUM TO 0.
UNTIL FALSE {
	// WRITE DATA
	IF ACTIVE {
		DATAFILE:WRITE(TIME:SECONDS+",").
		FOR PART IN SHIP:PARTS {
			IF (PART:NAME = "sensorThermometer") OR (PART:NAME = "sensorAccelerometer") {
				SET MODULE TO PART:GETMODULE("ModuleEnviroSensor").
				SET TEMP TO MODULE:GETFIELD("DISPLAY").
				DATAFILE:WRITE((TEMP:SUBSTRING(0,TEMP:LENGTH-1))+",").
			}
		}
		DATAFILE:WRITELN("0").
		SET NUM TO NUM + 1.
	} ELSE {
		WAIT 1.0.
	}
	
	// PRINT STATUS
	PRINT "    ACTIVE: " + ACTIVE AT (0,2).
	PRINT "      FILE: " + ID AT (0,3).
	PRINT "     INDEX: " + NUM AT (0,4).
	PRINT "FREE SPACE: " + PROCESSOR("MADS"):VOLUME():FREESPACE AT (0,5).
	PRINT "  CAPACITY: " + PROCESSOR("MADS"):VOLUME():CAPACITY AT (0,6).

	WAIT 0.5.
}