////////////////////////////////////////////////////////////////////////////////
// CONSTANTS AND INCLUDES
////////////////////////////////////////////////////////////////////////////////
//
// SHUTTLE DATA
//
// OV-101
//	DRY MASS:		18,704 kg
//	MAX MASS:		32,704 kg
//	MAX PAYLOAD:	14,000 kg
//
//	MAX G:		-2.0 .. 4.0 g
//	MAX Q:		21.0 kPA
//	MAX ALPHA:	43.0 DEG
//	MIN ALPHA:	25.0 DEG	(M < 4.25)
//				32.5 DEG	(M > 4.75)
//
//	NORMAL ENTRY CG:			7.509 .. 7.723 m
//	HI BODYFLAP HEAT ENTRY CG:	7.509 .. 7.770 m
//	MAX STABILITY CG RANGE:		7.264 .. 7.846 m
//	
// ENTRY CENTER OF MASS BALLANCE:
//	CM (m)	BODYFLAP (deg)
//	7.846	110		(-0.5 pitch)
//	7.809	110
//	7.781	108
//	7.770	105
//	7.758	100
//	7.748	95
//	7.723	90
//	7.667	85
//	7.607	80
//	7.509	70
//	7.264	70		(+0.5 pitch)
//
// BODY FLAP POSITION EQUATIONS
//	BODYFLAP =  -677.79 +  99.57*CM			CM: [7.509 .. 7.748]	(NORMAL RANGE)
//	BODYFLAP = -2967.82 + 395.62*CM			CM: [7.748 .. 7.781]	(EXTENDED RANGE)
//
////////////////////////////////////////////////////////////////////////////////
// MAJOR MODE 1
SET MM1_FULL_THRUST		TO 4700.	// FULL THRUST OF STACK (BEFORE BOOSTER SEP)
SET MM1_STEERING_ANGLE	TO 55.		// ENTRY ANGLE FOR CLOSED LOOP TRAJECTORY PORTION
SET MM1_CUTOFF_ANGLE	TO -20.		// NOMINAL CUTOFF ANGLE TO AIM FOR
SET MM1_MIN_ANGLE		TO -50.		// MIN ALLOWED ANGLE DURING CLOSED LOOP PORTION

// MAJOR MODE 3
SET MM3_GLIDE_ANG		TO 15.  	// GLIDESLOPE ANGLE
SET MM3_FLARE_ALT		TO 400. 	// ALTITUDE OF FLARE
SET MM3_H1_PARAM		TO 100. 	// HIGHER NUMBER = SHARPER FLARE
SET MM3_FINAL_ALT		TO 80.		// FINAL FLARE ALTITUDE
SET RUNWAY				TO LATLNG(-0.0486, -74.6848 - 0.07).

// MAJOR MODE 6
SET MM6_TARGET_ALT		TO 28000.	// TARGET POINT ALTITUDE	+-  2000 M
SET MM6_TARGET_DISTANCE	TO 110000.	// TARGET POINT DISTANCE	+- 10000 M
SET MM6_TARGET_SPEED	TO 800.		// TARGET VELOCITY			+-   200 M/S
SET MM6_BURN_DISTANCE	TO 1050000.	// REENTRY BURN DISTANCE




////////////////////////////////////////////////////////////////////////////////
// MAJOR MODE 0 (IDLE)
////////////////////////////////////////////////////////////////////////////////
FUNCTION MAJOR_MODE0_TRANSFER {
	TRANSFER_MODE(0,0).
}

FUNCTION MAJOR_MODE0 {
	IF UI_UPDATE {
		SET CM TO (SHIP:POSITION - SHIP:ROOTPART:POSITION):MAG.
		PRINT_VAR(10,"CM",		"M",	5, ROUND(CM,3),		0,0).
		//PRINT_VAR(0, "TEST1", "M", 5, ROUND(SIN(TIME:SECONDS*8),1), 0,0).
		//PRINT_VAR(0, "TEST2", "M", 5, ROUND(SIN(TIME:SECONDS*15),1), 0,1).
		//PRINT_VAR(0, "TEST3", "M", 5, ROUND(SIN(TIME:SECONDS*30),1), 0,2).
	}
}




////////////////////////////////////////////////////////////////////////////////
// ENTRYPOINT
////////////////////////////////////////////////////////////////////////////////
// LOAD SYSTEM
RUN SYS.
RUN EVENT.

// LOAD MAJOR MODES
RUN MM1.
RUN MM2.
RUN MM3.
RUN MM6.

// INITIALIZE SYSTEM
IF NOT EXISTS("STORE_MAJORMODE") {
	SET STORE_MAJOR_MODE TO CREATE("STORE_MAJORMODE").
	STORE_MAJOR_MODE:WRITE("M0").
	SET STORE_MINOR_MODE TO CREATE("STORE_MINORMODE").
	STORE_MINOR_MODE:WRITE("M0").
} ELSE {
	SET STORE_MAJOR_MODE TO OPEN("STORE_MAJORMODE").
	SET STORE_MINOR_MODE TO OPEN("STORE_MINORMODE").
}

// INITIALIZE TERMINAL
CLEARSCREEN.
SET TERMINAL:CHARWIDTH TO 12.
SET TERMINAL:CHARHEIGHT TO 12.
SET TERMINAL:WIDTH TO 24.
SET TERMINAL:HEIGHT TO 12.
SET MAJOR_MODE TO 0.
SET MINOR_MODE TO 0.

// TRANSFER TO MAJOR MODE
SET STORE_VAL TO STORE_MAJOR_MODE:READALL:STRING:SUBSTRING(0,2).
	 IF STORE_VAL = "M0" { SET RESTORED_MAJOR_MODE TO 0. }
ELSE IF STORE_VAL = "M1" { SET RESTORED_MAJOR_MODE TO 1. }
ELSE IF STORE_VAL = "M2" { SET RESTORED_MAJOR_MODE TO 2. }
ELSE IF STORE_VAL = "M3" { SET RESTORED_MAJOR_MODE TO 3. }
ELSE IF STORE_VAL = "M4" { SET RESTORED_MAJOR_MODE TO 4. }
ELSE IF STORE_VAL = "M5" { SET RESTORED_MAJOR_MODE TO 5. }
ELSE IF STORE_VAL = "M6" { SET RESTORED_MAJOR_MODE TO 6. }
ELSE IF STORE_VAL = "M7" { SET RESTORED_MAJOR_MODE TO 7. }
ELSE IF STORE_VAL = "M8" { SET RESTORED_MAJOR_MODE TO 8. }
ELSE IF STORE_VAL = "M9" { SET RESTORED_MAJOR_MODE TO 9. }

// TRANSFER TO MINOR MODE
SET STORE_VAL TO STORE_MINOR_MODE:READALL:STRING:SUBSTRING(0,2).
	 IF STORE_VAL = "M0" { SET RESTORED_MINOR_MODE TO 0. }
ELSE IF STORE_VAL = "M1" { SET RESTORED_MINOR_MODE TO 1. }
ELSE IF STORE_VAL = "M2" { SET RESTORED_MINOR_MODE TO 2. }
ELSE IF STORE_VAL = "M3" { SET RESTORED_MINOR_MODE TO 3. }
ELSE IF STORE_VAL = "M4" { SET RESTORED_MINOR_MODE TO 4. }
ELSE IF STORE_VAL = "M5" { SET RESTORED_MINOR_MODE TO 5. }
ELSE IF STORE_VAL = "M6" { SET RESTORED_MINOR_MODE TO 6. }
ELSE IF STORE_VAL = "M7" { SET RESTORED_MINOR_MODE TO 7. }
ELSE IF STORE_VAL = "M8" { SET RESTORED_MINOR_MODE TO 8. }
ELSE IF STORE_VAL = "M9" { SET RESTORED_MINOR_MODE TO 9. }

// OVERRIDE RESTORED MODE (FOR DEBUGGING)
//SET RESTORED_MAJOR_MODE TO 3.
//SET RESTORED_MINOR_MODE TO 1.

// PERFORM A RESTART
SET RESTART TO TRUE.
TRANSFER_MODE(RESTORED_MAJOR_MODE, RESTORED_MINOR_MODE).
SET RESTART TO FALSE.

// TASK TO CHECK IF GPC IS ACTIVE
//FUNCTION GPC_ACTIVE_TASK() {
	// CHECK IF THIS GPC IS ACTIVE
//}




////////////////////////////////////////////////////////////////////////////////
// MAIN LOOP
////////////////////////////////////////////////////////////////////////////////
UNTIL FALSE {
	// DELTA TIME
	SET DT_TIME TO TIME:SECONDS-0.01.
	
	// MAJOR MODE 0
	UNTIL MAJOR_MODE <> 0 {
		SET DT TO TIME:SECONDS - DT_TIME.
		SET DT_TIME TO TIME:SECONDS.
		MONITORING_TASK().
		MAJOR_MODE0().
		UI_TASK().
		WAIT 0.
	}
	
	// MAJOR MODE 1
	UNTIL MAJOR_MODE <> 1 {
		SET DT TO TIME:SECONDS - DT_TIME.
		SET DT_TIME TO TIME:SECONDS.
		MONITORING_TASK().
		MAJOR_MODE1().
		UI_TASK().
		WAIT 0.
	}
	
	// MAJOR MODE 2
	UNTIL MAJOR_MODE <> 2 {
		SET DT TO TIME:SECONDS - DT_TIME.
		SET DT_TIME TO TIME:SECONDS.
		MAJOR_MODE2().
		UI_TASK().
		WAIT 0.
	}

	// MAJOR MODE 3
	UNTIL MAJOR_MODE <> 3 {
		SET DT TO TIME:SECONDS - DT_TIME.
		SET DT_TIME TO TIME:SECONDS.
		MONITORING_TASK().
		MAJOR_MODE3().
		UI_TASK().
		WAIT 0.
	}
	
	// MAJOR MODE 6
	UNTIL MAJOR_MODE <> 6 {
		SET DT TO TIME:SECONDS - DT_TIME.
		SET DT_TIME TO TIME:SECONDS.
		MONITORING_TASK().
		MAJOR_MODE6().
		UI_TASK().
		WAIT 0.
	}
	
	// PAUSE BETWEEN MAJOR MODE TRANSFERS
	WAIT 0.5.
}
