////////////////////////////////////////////////////////////////////////////////
// RTSK		DATA SUBSYSTEM
////////////////////////////////////////////////////////////////////////////////
// PERSISTENT VARIABLES
GLOBAL PVARS TO LEXICON().

// FILE HOLDING PERSISTENT VARIABLES
IF NOT EXISTS("0:/PVARS") {
	GLOBAL PFILE TO CREATE("0:/PVARS").
} ELSE {
	GLOBAL PFILE TO OPEN("0:/PVARS").
}

// TELEMETRY VARIABLES
GLOBAL TVARS TO LEXICON().
GLOBAL TVARS_CHANGED TO LEXICON().




////////////////////////////////////////////////////////////////////////////////
//
// SET TELEMETRY VALUE
//
FUNCTION DOWNLINK {
	PARAMETER NAME, VALUE.
	IF NOT TVARS:HASKEY(NAME) {
		TVARS:ADD(NAME, VALUE - 1).
		TVARS_CHANGED:ADD(NAME, FALSE).
	}
	
	IF TVARS[NAME] <> VALUE {
		SET TVARS[NAME] TO VALUE.
		SET TVARS_CHANGED[NAME] TO TRUE.
	}
}




////////////////////////////////////////////////////////////////////////////////
//
// PVAR SAVING TASK
//
FUNCTION TASK_PVAR_SAVE { PARAMETER DT.
	PVARS_SAVE().
}

//
// SET PERSISTENT VALUE
//
FUNCTION SET_PVAR {
	PARAMETER NAME, VALUE.
	IF NOT PVARS:HASKEY(NAME) {
		PVARS:ADD(NAME, VALUE).
	} ELSE {
		SET PVARS[NAME] TO VALUE.
	}
	
	// SAVE PVARS AFTER SOME DELAY
	TASK_SCHEDULE(6, TASK_PVAR_SAVE@).
}

//
// SET PERSISTENT VALUE (FASTER)
//
FUNCTION SET_PVAR_FAST {
	PARAMETER NAME, VALUE.
	IF NOT PVARS:HASKEY(NAME) {
		PVARS:ADD(NAME, VALUE).
	} ELSE {
		SET PVARS[NAME] TO VALUE.
	}
}

//
// GET PERSISTENT VALUE
//
FUNCTION GET_PVAR {
	PARAMETER NAME, DEFAULT.
	IF NOT PVARS:HASKEY(NAME) {
		PVARS:ADD(NAME, DEFAULT).
	}
	RETURN PVARS[NAME].
}

//
// SAVE PVARS
//
FUNCTION PVARS_SAVE {
	PFILE:CLEAR().
	FOR NAME IN PVARS:KEYS {
		PFILE:WRITELN(NAME + "|" + PVARS[NAME]).
	}
}

//
// LOAD PVARS
//
FUNCTION PVARS_LOAD {
	LOCAL PVARS_ITERATOR IS PFILE:READALL:ITERATOR.
	UNTIL NOT PVARS_ITERATOR:NEXT {
		LOCAL PAIR IS PVARS_ITERATOR:VALUE:SPLIT("|").
		IF PAIR:LENGTH = 2 {
			LOCAL NAME IS PAIR[0].
			LOCAL VALUE IS PAIR[1].
			IF NOT NAME:CONTAINS("$") {
				SET VALUE TO PVAR_S2N(PAIR[1]).
			}
			
			IF NOT PVARS:HASKEY(NAME) {
				PVARS:ADD(NAME, VALUE).
			} ELSE {
				SET PVARS[NAME] TO VALUE.
			}
		}
	}
}

//
// HELPER FUNCTION: GET NUMBER FROM STRING
//
LOCAL NUMBERS IS LEXICON().
NUMBERS:ADD("0", 0).
NUMBERS:ADD("1", 1).
NUMBERS:ADD("2", 2).
NUMBERS:ADD("3", 3).
NUMBERS:ADD("4", 4).
NUMBERS:ADD("5", 5).
NUMBERS:ADD("6", 6).
NUMBERS:ADD("7", 7).
NUMBERS:ADD("8", 8).
NUMBERS:ADD("9", 9).

FUNCTION PVAR_S2N {
	PARAMETER STR.

	IF STR:STARTSWITH("-") {
		RETURN -PVAR_S2N(STR:SUBSTRING(1, STR:LENGTH-1)).
	}

	IF STR:CONTAINS(".") {
	LOCAL PARTS IS STR:SPLIT(".").
		IF PARTS:LENGTH <> 2 {
			RETURN 0.
		}
		LOCAL PART0 IS PVAR_S2N(PARTS[0]).
		LOCAL PART1 IS PVAR_S2N(PARTS[1]).
		RETURN PART0 + (PART1 / (10^PARTS[1]:LENGTH)).
	}

	LOCAL VALUE IS 0.
		FOR I IN STR:SPLIT(""):SUBLIST(1, STR:LENGTH) {
		IF NUMBERS:HASKEY(I) {
			SET VALUE TO VALUE + NUMBERS[I].
		} ELSE {
			RETURN 0.
		}
		SET VALUE TO VALUE * 10.
	}
	RETURN VALUE / 10.
}