////////////////////////////////////////////////////////////////////////////////
// MAJOR MODE 3 (LANDING)
////////////////////////////////////////////////////////////////////////////////
FUNCTION MAJOR_MODE3_TRANSFER {
	// VELOCITY MONITOR
	SET PREV_POS TO V(0,0,0).
	
	// CALCULATE GLIDESLOPE PARAMETERS
	SET H0 TO MM3_FLARE_ALT + MM3_H1_PARAM.
	SET D1 TO MM3_FLARE_ALT/TAN(MM3_GLIDE_ANG).
	SET FLARE_CONST TO (H0*D1)/MM3_FLARE_ALT.
	SET FLARE_LENGTH TO -LN(MM3_H1_PARAM/H0)*FLARE_CONST.
	SET FLARE_DISPLACEMENT TO FLARE_LENGTH - D1.
	
	// HEADING
	SET HEADING_SIGN TO 1.
	IF GEOPOSITION:LNG > RUNWAY:LNG {
		SET HEADING_SIGN TO -1.
	}
	
	// INITIALIZE CONTROLLERS
	SET APPROACH_CONTROLLER TO	PIDLOOP(0.025,	0.000,	0.025,  -9.0, 12.5).
	SET GS_CONTROLLER TO		PIDLOOP(0.500,	0.050,	0.350,  -9.0, 12.5).
	SET FLARE_CONTROLLER TO		PIDLOOP(1.000,	0.000,	0.600,	-2.0, 7.5).
	SET TARGET_ENERGY TO 10000000.
	
	// QUICK MODE TRANSFERS
	IF RESTART { // FIXME
		IF AIRSPEED < 1 {
			SET MINOR_MODE TO 5.
			SET RESTART TO FALSE.
		}
	}
}

FUNCTION MAJOR_MODE3 {
	// SKIP ALL THE LOGIC
	IF MINOR_MODE = 5 {
		UNLOCK THROTTLE.
		RETURN.
	}
	
	// FORCE RCS OFF
	IF ((SHIP:Q < 0.05) AND (MINOR_MODE <= 2)) {
		RCS ON.
	} ELSE {
		RCS OFF.
	}

	// HORIZONTAL NAVIGATION
	SET HNAV_DELTA TO (1000*(GEOPOSITION:LAT - RUNWAY:LAT)).
	SET HNAV TO MIN(MAX( HNAV_DELTA*0.25,-25),25).

	// VERTICAL NAVIGATION
	SET NAV_ALT TO SHIP:ALTITUDE - 71.
	IF RUNWAY:DISTANCE > FLARE_LENGTH { // ON GLIDE SLOPE
		SET SLOPE TO (RUNWAY:DISTANCE - FLARE_DISPLACEMENT)*TAN(MM3_GLIDE_ANG).
	} ELSE { // ON FLARE
		SET EXP_PARAM TO -MAX(0, FLARE_LENGTH - RUNWAY:DISTANCE)/FLARE_CONST.
		SET EXP_VALUE TO CONSTANT:E^EXP_PARAM.
		SET SLOPE TO (H0*EXP_VALUE - MM3_H1_PARAM).
	}
	
	// GLIDE SLOPE TOWARDS 75% OF FINAL ALTITUDE
	SET VNAV_DELTA TO (NAV_ALT - (MM3_FINAL_ALT*0.75 + SLOPE)).
	IF MINOR_MODE >= 2 {
		// DESCENT CONTROL
		SET VNAV TO GS_CONTROLLER:UPDATE(TIME:SECONDS, VNAV_DELTA).
	} ELSE {
		// APPROACH CONTROL
		SET VNAV TO GS_CONTROLLER:UPDATE(TIME:SECONDS, VNAV_DELTA).
	}
	
	// ENERGY MANAGEMENT
	SET TOTAL_ENERGY TO (AIRSPEED^2)/2 + 9.81*NAV_ALT.
	// ALTITUDE ENERGY GRADIENT
	SET ALT_ENERGY TO MAX(0,MIN(1,RUNWAY:DISTANCE/20000)).
	// VELOCITY ENERGY GRADIENT
	SET V_ENERGY TO MAX(0,MIN(1,(RUNWAY:DISTANCE-20000)/30000)).
	// ENERGY SETPOINT
	SET SET_ENERGY TO ((115 + 650*V_ENERGY)^2)/2 + 75000*MAX(0,MIN(1,RUNWAY:DISTANCE/20000)).
	SET TARGET_ENERGY TO MIN(TARGET_ENERGY, SET_ENERGY).
	
	// COMPUTE RELATIVE SPEEDS
	SET VX TO (RUNWAY:DISTANCE - PREV_POS:X)/DT.
	SET VY TO (HNAV_DELTA - PREV_POS:Y)/DT.
	SET VZ TO (NAV_ALT - PREV_POS:Z)/DT.
	SET PREV_POS:X TO RUNWAY:DISTANCE.
	SET PREV_POS:Y TO HNAV_DELTA.
	SET PREV_POS:Z TO NAV_ALT.

	// FINAL TOUCHDOWN OVERRIDE
	IF ALT:RADAR < MM3_FINAL_ALT { // FINAL FLARE CONTROL
		// BLEND BETWEEN 5 M/S AND 1 M/S VERTICAL VELOCITY
		SET VNAV_MOD TO MAX(0, MIN(1, (ALT:RADAR-5)/(MM3_FINAL_ALT*0.5) )).
		// FLARE CORRECTION
		SET VNAV_CORR TO FLARE_CONTROLLER:UPDATE(TIME:SECONDS, VZ+ (1+4*VNAV_MOD) ).
		
		// GRADIENT FROM GLIDE SLOPE TO FINAL FLARE
		SET VNAV_DELTA TO (MM3_FINAL_ALT - ALT:RADAR)/20.
		SET VNAV TO MAX(VNAV, 17.0*MIN(MAX(VNAV_DELTA,0),1) + VNAV_CORR).
	}
	IF RUNWAY:DISTANCE < 25000 { // TRANSFER TO MODE 32 FOR DESCENT
		IF MINOR_MODE = 1 {
			TRANSFER_MODE(3,2).
		}
	}
	IF ALT:RADAR < 5 { // TRANSFER TO MODE 33 ON TOUCHDOWN
		IF MINOR_MODE = 2 {
			TRANSFER_MODE(3,3).
		}
	}
	IF TIME:SECONDS - MODE_TIMER > 4.0 { // TRANSFER TO MODE 34 AFTER STABILIZING
		IF MINOR_MODE = 3 {
			TRANSFER_MODE(3,4).
			STAGE. // FIXME
		}
	}
	IF MINOR_MODE = 4 { // TRANSFER TO MODE 35 AFTER A FULL STOP
		IF AIRSPEED < 1 {
			TRANSFER_MODE(3,5).
		}
	}

	IF MINOR_MODE = 0 { // MONITOR
		UNLOCK STEERING.
	}
	IF (MINOR_MODE = 1) OR (MINOR_MODE = 2) { // DESCENT/APPROACH
		IF (TOTAL_ENERGY > TARGET_ENERGY) OR (SHIP:Q > 0.18) {
			BRAKES ON.
		}
		IF (TOTAL_ENERGY < TARGET_ENERGY) AND (SHIP:Q < 0.18) {
			BRAKES OFF.
		}
		IF ALT:RADAR < MM3_FINAL_ALT { // FINAL FLARE
			BRAKES OFF.
		}
	
		// STEERING LOOP
		LOCK STEERING TO HEADING(HEADING_SIGN*(90 + HNAV), -10 + VNAV). //*R(0,0,-HNAV).
	}
	IF MINOR_MODE = 3 { // LANDING
		BRAKES OFF.
		UNLOCK STEERING.
		SET SHIP:CONTROL:PITCH TO 0.0.
		SET SHIP:CONTROL:YAW TO 0.0.
		SET SHIP:CONTROL:ROLL TO 0.0.
	}
	IF MINOR_MODE = 4 { // BRAKE
		BRAKES ON.
		UNLOCK STEERING.
		SET SHIP:CONTROL:NEUTRALIZE TO TRUE.
	}
	
	// DISPLAY OUTPUT
	IF UI_UPDATE {
		PRINT_VAR(0, "RADALT",	"M",	5, ROUND(ALT:RADAR,0),				0,0).
		PRINT_VAR(1, "NAVALT",	"M",	5, ROUND(NAV_ALT,0),				0,1).
		PRINT_VAR(2, "NAV +X",	"M",	5, 10*ROUND(RUNWAY:DISTANCE/10,0),	0,3).
		PRINT_VAR(3, "dE",		"J",	4, 
			ROUND(MIN(9999,MAX(-9999,TOTAL_ENERGY - TARGET_ENERGY)),0),		15,3).
		PRINT_VAR(0, "NAV +Y",	"M",	5, ROUND(HNAV_DELTA,1),				0,4).
		PRINT_VAR(0, "NAV +Z",	"M",	5, ROUND(VNAV_DELTA,1),				0,5).
		
		PRINT_VAR(0, " +X",		"M/S",	5, ROUND(AIRSPEED,1),				0,7).
		PRINT_VAR(0, " +Y",		"M/S",	5, ROUND(VY,1),						0,8).
		PRINT_VAR(0, " +Z",		"M/S",	5, ROUND(VZ,1),						0,9).
		
		IF ALTITUDE < 325 {
			PRINT "GEAR" AT (18,2).
		}
		IF BRAKES {
			PRINT "BRKS" AT (18,3).
		} ELSE {
			PRINT "----" AT (18,3).
		}
	}
}